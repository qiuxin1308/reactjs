{"ast":null,"code":"import _regeneratorRuntime from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from './types';\nimport streams from '../apis/streams';\nexport var signIn = function signIn(userId) {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n}; //create a new stream record\n\nexport var createStream = function createStream(formValue) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userId, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userId = getState().auth.userId;\n                _context.next = 3;\n                return streams.post('/streams', _objectSpread({}, formValue, {\n                  userId: userId\n                }));\n\n              case 3:\n                response = _context.sent;\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.data\n                }); //do some programmatic navigation to get the user back to the root route\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetch all stream records\n\nexport var fetchStreams = function fetchStreams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.get('/streams');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: FETCH_STREAMS,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //fetch a single stream record\n\nexport var fetchStream = function fetchStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: FETCH_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //update a stream record, so first fetch stream and then create a new stream\n\nexport var editStreams = function editStreams(id, formValue) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return streams.put(\"/streams/\".concat(id), formValue);\n\n              case 2:\n                response = _context4.sent;\n                dispatch({\n                  type: EDIT_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; //delete a stream record\n\nexport var deleteStream = function deleteStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return streams.delete(\"/streams/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: DELETE_STREAM,\n                  payload: id\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/src/actions/index.js"],"names":["SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","streams","signIn","userId","type","payload","signOut","createStream","formValue","dispatch","getState","auth","post","response","data","fetchStreams","get","fetchStream","id","editStreams","put","deleteStream","delete"],"mappings":"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","sourcesContent":["import {\n    SIGN_IN,\n    SIGN_OUT,\n    CREATE_STREAM,\n    FETCH_STREAMS,\n    FETCH_STREAM,\n    DELETE_STREAM,\n    EDIT_STREAM\n} from './types';\nimport streams from '../apis/streams';\n\nexport const signIn = (userId) => {\n    return {\n        type: SIGN_IN,\n        payload: userId\n    };\n};\n\nexport const signOut = () => {\n    return {\n        type: SIGN_OUT\n    };\n};\n\n//create a new stream record\nexport const createStream = formValue => async (dispatch, getState) => {\n    const { userId } = getState().auth;\n    const response = await streams.post('/streams', { ...formValue, userId });\n\n    dispatch({ type: CREATE_STREAM, payload: response.data });\n    //do some programmatic navigation to get the user back to the root route\n    \n};\n\n//fetch all stream records\nexport const fetchStreams = () => async dispatch => {\n    const response = await streams.get('/streams');\n\n    dispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\n//fetch a single stream record\nexport const fetchStream = id => async dispatch => {\n    const response = await streams.get(`/streams/${id}`);\n\n    dispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\n//update a stream record, so first fetch stream and then create a new stream\nexport const editStreams = (id, formValue) => async dispatch => {\n    const response = await streams.put(`/streams/${id}`, formValue);\n\n    dispatch({ type: EDIT_STREAM, payload: response.data });\n};\n\n//delete a stream record\nexport const deleteStream = id => async dispatch => {\n    await streams.delete(`/streams/${id}`);\n\n    dispatch({ type: DELETE_STREAM, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}