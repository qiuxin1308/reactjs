{"ast":null,"code":"import _classCallCheck from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamForm, _React$Component);\n\n  function StreamForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      //console.log(formProps);\n      //console.log(meta);\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValue) {\n      _this.props.onSubmit(formValue);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamForm, [{\n    key: \"renderError\",\n    //handle the render error message\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (error && touched) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props);\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamForm;\n}(React.Component); //check whether users entered the right input\n\n\nvar validate = function validate(formValue) {\n  var error = {};\n\n  if (!formValue.title) {\n    //only ran if the user did not enter a title\n    error.title = 'You must enter a title.';\n  }\n\n  if (!formValue.description) {\n    error.description = 'You must enter a description.';\n  }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValue","props","handleSubmit","Component","validate","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,U;;;;;;;;;;;;;;;;;;UAYFC,W,GAAc,gBAA4B;AAAA,UAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,UAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACtC;AACA;AACA,UAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AAEA,aACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,MAAKM,WAAL,CAAiBJ,IAAjB,CAHL,CADJ;AAOH,K;;UAGDK,Q,GAAW,UAAAC,SAAS,EAAI;AACpB,YAAKC,KAAL,CAAWF,QAAX,CAAoBC,SAApB;AACH,K;;;;;;;AA5BD;uCACgC;AAAA,UAAlBJ,KAAkB,SAAlBA,KAAkB;AAAA,UAAXC,OAAW,SAAXA,OAAW;;AAC5B,UAAGD,KAAK,IAAIC,OAAZ,EAAqB;AACjB,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBD,KAAzB,CADJ,CADJ;AAKH;AACJ;;;6BAqBQ;AACL;AACA,aACI;AACI,QAAA,QAAQ,EAAE,KAAKK,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CADd;AAEI,QAAA,SAAS,EAAC,eAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,SAAS,EAAE,KAAKR,WAFpB;AAGI,QAAA,KAAK,EAAC,aAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EASI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,SAAS,EAAE,KAAKA,WAFpB;AAGI,QAAA,KAAK,EAAC,mBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,EAcI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdJ,CADJ;AAkBH;;;;EAnDoBJ,KAAK,CAACgB,S,GAsD/B;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAJ,SAAS,EAAI;AAC1B,MAAMJ,KAAK,GAAG,EAAd;;AAEA,MAAG,CAACI,SAAS,CAACK,KAAd,EAAqB;AACjB;AACAT,IAAAA,KAAK,CAACS,KAAN,GAAc,yBAAd;AACH;;AAED,MAAG,CAACL,SAAS,CAACM,WAAd,EAA2B;AACvBV,IAAAA,KAAK,CAACU,WAAN,GAAoB,+BAApB;AACH;;AAED,SAAOV,KAAP;AACH,CAbD;;AAeA,eAAeP,SAAS,CAAC;AACrBkB,EAAAA,IAAI,EAAE,YADe;AAErBH,EAAAA,QAAQ,EAARA;AAFqB,CAAD,CAAT,CAGZd,UAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n    //handle the render error message\n    renderError({ error, touched }) {\n        if(error && touched) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        //console.log(formProps);\n        //console.log(meta);\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                <input {...input} autoComplete=\"off\"/>\n                {this.renderError(meta)}\n            </div>\n        );\n    };\n\n    //when clicking the submit button\n    onSubmit = formValue => {\n        this.props.onSubmit(formValue);\n    };\n\n    render() {\n        //console.log(this.props);\n        return (\n            <form \n                onSubmit={this.props.handleSubmit(this.onSubmit)} \n                className=\"ui form error\"\n            >\n                <Field \n                    name=\"title\" \n                    component={this.renderInput} \n                    label=\"Enter Title\"\n                />\n                <Field \n                    name=\"description\"\n                    component={this.renderInput} \n                    label=\"Enter Description\"\n                />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\n//check whether users entered the right input\nconst validate = formValue => {\n    const error = {};\n\n    if(!formValue.title) {\n        //only ran if the user did not enter a title\n        error.title = 'You must enter a title.';\n    }\n\n    if(!formValue.description) {\n        error.description = 'You must enter a description.';\n    }\n\n    return error;\n};\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate\n})(StreamForm);"]},"metadata":{},"sourceType":"module"}