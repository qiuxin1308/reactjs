{"ast":null,"code":"import _classCallCheck from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderError\",\n    //handle the render error message\n    value: function renderError(_ref) {\n      var error = _ref.error,\n          touched = _ref.touched;\n\n      if (error && touched) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"renderInput\",\n    value: function renderInput(_ref2) {\n      var input = _ref2.input,\n          label = _ref2.label,\n          meta = _ref2.meta;\n      //console.log(formProps);\n      console.log(meta);\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })));\n    } //when clicking the submit button\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValue) {\n      console.log(formValue); //event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props);\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component); //check whether users entered the right input\n\n\nvar validate = function validate(formValue) {\n  var error = {};\n\n  if (!formValue.title) {\n    //only ran if the user did not enter a title\n    error.title = 'You must enter a title.';\n  }\n\n  if (!formValue.description) {\n    error.description = 'You must enter a description.';\n  }\n\n  return error;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/xinqiu_1308/Desktop/courses/React_Redux/channels/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","error","touched","input","label","meta","console","log","formValue","props","handleSubmit","onSubmit","renderInput","Component","validate","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Y;;;;;;;;;;;;;AACF;sCACgC;AAAA,UAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,UAAXC,OAAW,QAAXA,OAAW;;AAC5B,UAAGD,KAAK,IAAIC,OAAZ,EAAqB;AACjB,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBD,KAAzB,CADJ,CADJ;AAKH;AACJ;;;uCAEmC;AAAA,UAAtBE,KAAsB,SAAtBA,KAAsB;AAAA,UAAfC,KAAe,SAAfA,KAAe;AAAA,UAARC,IAAQ,SAARA,IAAQ;AAChC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,CADJ;AAOH,K,CAED;;;;6BACSK,S,EAAW;AAChBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EADgB,CAEhB;AACH;;;6BAEQ;AACL;AACA,aACI;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,SAAS,EAAE,KAAKC,WAFpB;AAGI,QAAA,KAAK,EAAC,aAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAMI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,SAAS,EAAE,KAAKA,WAFpB;AAGI,QAAA,KAAK,EAAC,mBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,EAWI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,CADJ;AAeH;;;;EA/CsBf,KAAK,CAACgB,S,GAkDjC;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAN,SAAS,EAAI;AAC1B,MAAMP,KAAK,GAAG,EAAd;;AAEA,MAAG,CAACO,SAAS,CAACO,KAAd,EAAqB;AACjB;AACAd,IAAAA,KAAK,CAACc,KAAN,GAAc,yBAAd;AACH;;AAED,MAAG,CAACP,SAAS,CAACQ,WAAd,EAA2B;AACvBf,IAAAA,KAAK,CAACe,WAAN,GAAoB,+BAApB;AACH;;AAED,SAAOf,KAAP;AACH,CAbD;;AAeA,eAAeF,SAAS,CAAC;AACrBkB,EAAAA,IAAI,EAAE,cADe;AAErBH,EAAAA,QAAQ,EAARA;AAFqB,CAAD,CAAT,CAGZd,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n    //handle the render error message\n    renderError({ error, touched }) {\n        if(error && touched) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput({ input, label, meta }) {\n        //console.log(formProps);\n        console.log(meta);\n        return (\n            <div className=\"field\">\n                <label>{label}</label>\n                <input {...input} autoComplete=\"off\"/>\n                \n            </div>\n        );\n    }\n\n    //when clicking the submit button\n    onSubmit(formValue) {\n        console.log(formValue);\n        //event.preventDefault();\n    }\n\n    render() {\n        //console.log(this.props);\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n                <Field \n                    name=\"title\" \n                    component={this.renderInput} \n                    label=\"Enter Title\"\n                />\n                <Field \n                    name=\"description\"\n                    component={this.renderInput} \n                    label=\"Enter Description\"\n                />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\n//check whether users entered the right input\nconst validate = formValue => {\n    const error = {};\n\n    if(!formValue.title) {\n        //only ran if the user did not enter a title\n        error.title = 'You must enter a title.';\n    }\n\n    if(!formValue.description) {\n        error.description = 'You must enter a description.';\n    }\n\n    return error;\n};\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}